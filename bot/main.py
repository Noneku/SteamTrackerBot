import asyncio
import discord
import os
from dotenv import load_dotenv
from discord.ext import commands  # Importer `commands` de discord.ext
from bot_singleton import BotSingleton

# R√©cup√©rer l'instance du bot
intents = discord.Intents.default()
intents.message_content = True 
bot = commands.Bot(command_prefix="!", intents=intents)  # Utiliser `commands.Bot` au lieu de `discord.Client`

# Event on_ready - Lorsque le bot est pr√™t
@bot.event
async def on_ready():
    print(f"‚úÖ {bot.user} est connect√© et pr√™t !")
    print(f"üìú Commandes disponibles : {[command.name for command in bot.commands]}")  # Liste des commandes

    # Envoi d'un message dans un canal sp√©cifique apr√®s le d√©marrage
    channel_id = int(os.getenv("DISCORD_CHANNEL_ID")) # R√©cup√®re l'ID du canal depuis le fichier .env
    channel = bot.get_channel(channel_id)  # R√©cup√®re le canal
    if channel:
        await channel.send("Le bot est pr√™t et fonctionne ! üéâ")  # Envoie un message dans le canal
    else:
        print("‚ùå Le canal n'a pas √©t√© trouv√©.")

# Event on_message - Lorsque le bot re√ßoit un message
@bot.event 
async def on_message(message: discord.Message):
    if message.content.lower() == "!recolte":  # V√©rifier si la commande est envoy√©e
        await message.channel.send('üåæ En route pour la r√©colte !')  # Envoie un message de r√©ponse

# Fonction pour charger toutes les extensions (cogs)
async def load_extensions():
    cogs_directory = os.path.join(os.path.dirname(__file__), 'cogs')
    for filename in os.listdir(cogs_directory):
        if filename.endswith(".py") and filename != "__init__.py":
            try:
                # Utilisation de 'load_extension' au lieu de 'add_cog'
                await bot.load_extension(f"cogs.{filename[:-3]}")
                print(f"‚úÖ Cog {filename} charg√© avec succ√®s.")
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement de {filename}: {e}")

# Fonction principale pour d√©marrer le bot
async def main():
    load_dotenv()  # Charger les variables d'environnement depuis le fichier .env
    await load_extensions()  # Charger toutes les extensions
    await bot.start(os.getenv("DISCORD_TOKEN"))  # Lancer le bot avec le token

if __name__ == "__main__":
    asyncio.run(main())  # Lancer la fonction main
